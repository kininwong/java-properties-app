package com.ebshk.sas;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.io.ByteSource;
import com.google.common.io.Resources;

/*
 * This Java source file was generated by the Gradle 'init' task.
 * https://blog.csdn.net/liudongdong19/article/details/80436350
 */
public class App {
	private static final String CONFIG_PATH = "Backup_config.properties";
	private static final String SAS_APP_NC_DIRECTORY_KEY = "sas_app_namecheck_directory";
	private static Logger log = LoggerFactory.getLogger(App.class.getName());
	
	
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
    	App app = new App();
    	
    	String rootPath = App.class.getResource("").getPath();
    	log.info("Working Directory getResource= {}", rootPath);
    	rootPath = App.class.getResource("/").getPath();
    	log.info("Working Directory getResource= {}", rootPath);
    	rootPath = App.class.getClassLoader().getResource("").getPath();
    	log.info("Working Directory getClassLoader= {}", rootPath);
    	rootPath = ClassLoader.getSystemResource("").getPath();
    	log.info("Working Directory getSystemResource= {}", rootPath);
    	rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
    	log.info("Working Directory getContextClassLoader= {}", rootPath);
    	
    	
        
        log.info("Working Directory = {}", System.getProperty("user.dir"));
        app.loadPropertiesFromClassPath("email.properties");
        app.loadPropertiesFromClassPath(SAS_APP_NC_DIRECTORY_KEY, CONFIG_PATH);
        app.loadPropertiesFromClassPath("mail.sender", "email.properties");
        app.loadPropFileSystemByContextLoader("mail.sender", "email.properties");
        app.loadPropFromFileSystem("mail.sender", "config/email.properties");
    }
    
    public void loadPropertiesFromClassPath(String filename) {
        URL url = Resources.getResource(filename);

        final ByteSource byteSource = Resources.asByteSource(url);
        final Properties props = new Properties();
        try (InputStream inputStream = byteSource.openBufferedStream()) {
            props.load(inputStream);
            props.list(System.out);
        } catch (IOException e) {
            log.error("openBufferedStream failed!", e);
        }
    }
    
    private void loadPropertiesFromClassPath(String key, String propFilename) {
    	Properties properties = new Properties();
		InputStream in = getClass().getClassLoader().getResourceAsStream(propFilename);
		if (in == null) {
			System.out.println("cannot load properties file: " + propFilename);
			return;
		}
		try {
			properties.load(in);
		} catch (IOException e) {
			e.printStackTrace();
		}
		String namecheck_root = properties.getProperty(key);
		log.info("Filename:{},Key:{},Val:{}", propFilename, key, namecheck_root);
    }
    
    /*
     * by context class loader
     */
    private void loadPropFileSystemByContextLoader(String key, String propFilename) {
    	Properties properties = new Properties();
		try {
			String rootPath = Thread.currentThread().getContextClassLoader().getResource("").getPath();
			log.info("loadPropFileSystemByContextLoader: rootPath:{}", rootPath);
			properties.load(new FileInputStream(rootPath+propFilename));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		String namecheck_root = properties.getProperty(key);
		log.info("loadPropFileSystemByContextLoader: Filename:{},Key:{},Val:{}", propFilename, key, namecheck_root);
    }
    
    /*
     * by relative path
     */
    private void loadPropFromFileSystem(String key, String propFilename) {
    	Properties properties = new Properties();
		try {
			properties.load(new FileInputStream(propFilename));
		} catch (FileNotFoundException e) {
			log.error("FileNotFoundException:",e);
			return;
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		String namecheck_root = properties.getProperty(key);
		log.info("loadPropFromFileSystem: Filename:{},Key:{},Val:{}", propFilename, key, namecheck_root);
    }
}
